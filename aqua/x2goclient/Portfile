# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4
# $Id$

PortSystem              1.0
PortGroup               qt4 1.0

name                    x2goclient
version                 3.0.1.18

categories              aqua net
platforms               macosx
license                 GPL-2+

maintainers             cal openmaintainer

description             vnc-like remote desktop software
long_description        x2go is based on the (now closed source) NX libraries which provide \
                        terminal server services.

homepage                http://www.x2go.org/
master_sites            http://code.x2go.org/releases/source/${name}/
distname                ${name}_${version}
checksums               md5     b6ce5309d7ee55fc36154cf2dd7d84b8 \
                        sha1    367eeb26783063232e3b730211c847f108a22aca \
                        rmd160  248d444d7ab77d067c0dee670d6721b9aeb6abd6

universal_variant       yes
supported_archs         ppc i386 x86_64

depends_build           port:qt4-mac
depends_lib             port:qt4-mac \
                        port:nxproxy \
                        port:libssh

configure.cmd           ${qt_qmake_cmd}
configure.pre_args      PREFIX=${prefix}
configure.universal_args-delete \
                        --disable-dependency-tracking
configure.env-append    QMAKESPEC=${qt_mkspecs_dir}/macx-g++

pre-configure {
    ln -s ${name}/xsettingsui.ui ${worksrcpath}
    ln -s ${name}/xsettingswidget.cpp ${worksrcpath}
    ln -s ${name}/xsettingswidget.h ${worksrcpath}
}

build.env-append        QMAKESPEC=${qt_mkspecs_dir}/macx-g++
if {[variant_isset universal]} {
    build.args-append   CXXFLAGS="${configure.cxxflags} ${configure.universal_cxxflags}" \
                        CFLAGS="${configure.cflags} ${configure.universal_cflags}" \
                        CPPFLAGS="${configure.cppflags} ${configure.universal_cppflags}" \
                        LFLAGS="${configure.ldflags} ${configure.universal_ldflags}"
} else {
    build.args-append   CXXFLAGS="${configure.cxxflags}" \
                        CFLAGS="${configure.cflags}" \
                        CPPFLAGS="${configure.cppflags}" \
                        LFLAGS="${configure.ldflags}"
}
build.args-append       CC="${configure.cc}" \
                        CXX="${configure.cxx}" \
                        CPP="${configure.cpp}"

destroot {
    copy ${worksrcpath}/${name}.app ${destroot}${applications_dir}
}

